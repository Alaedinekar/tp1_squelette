const getBaseURL = () => {
    return new URL('.', import.meta.url);
};

function validURL(str) {
    var pattern = new RegExp('^(https?:\\/\\/)?' + // protocol
        '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|' + // domain name
        '((\\d{1,3}\\.){3}\\d{1,3}))' + // OR ip (v4) address
        '(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*' + // port and path
        '(\\?[;&a-z\\d%_.~+=-]*)?' + // query string
        '(\\#[-a-z\\d_]*)?$', 'i'); // fragment locator
    return !!pattern.test(str);
}

class MyLogo extends HTMLElement {
    style = `
    @import url('https://fonts.googleapis.com/css2?family=Grey+Qo&display=swap');

.text-blur-out {
-webkit-animation: text-blur-out 1.2s cubic-bezier(0.550, 0.085, 0.680, 0.530) both;
        animation: text-blur-out 1.2s cubic-bezier(0.550, 0.085, 0.680, 0.530) both;
}
    #logo {
        font-family: 'Grey Qo', cursive;
    }
    .focus-in-expand {
        -webkit-animation: focus-in-expand 0.8s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
                animation: focus-in-expand 0.8s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
    }
    .focus-in-expand-fwd {
        -webkit-animation: focus-in-expand-fwd 0.8s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
                animation: focus-in-expand-fwd 0.8s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
    }
    .tracking-in-expand {
        -webkit-animation: tracking-in-expand 0.7s cubic-bezier(0.215, 0.610, 0.355, 1.000) both;
                animation: tracking-in-expand 0.7s cubic-bezier(0.215, 0.610, 0.355, 1.000) both;
    }
    /* ----------------------------------------------
 * Generated by Animista on 2021-9-13 11:7:37
 * Licensed under FreeBSD License.
 * See http://animista.net/license for more info. 
 * w: http://animista.net, t: @cssanimista
 * ---------------------------------------------- */

/**
 * ----------------------------------------
 * animation focus-in-expand
 * ----------------------------------------
 */
@-webkit-keyframes focus-in-expand {
  0% {
    letter-spacing: -0.5em;
    -webkit-filter: blur(12px);
            filter: blur(12px);
    opacity: 0;
  }
  100% {
    -webkit-filter: blur(0px);
            filter: blur(0px);
    opacity: 1;
  }
}
@keyframes focus-in-expand {
  0% {
    letter-spacing: -0.5em;
    -webkit-filter: blur(12px);
            filter: blur(12px);
    opacity: 0;
  }
  100% {
    -webkit-filter: blur(0px);
            filter: blur(0px);
    opacity: 1;
  }
}
    #logo {
        color:red;
        font-size: 40px;
        border:5px solid green;
    }

@keyframes my-animation {
  from {
    background-color: #ff7a59;
    width: 300px;
    top: 10px;
  }
  to {
    background-color: #33475b;
    width: 50px;
    top: 100px;
  }
}
    /* ----------------------------------------------
 * Generated by Animista on 2021-9-20 9:19:32
 * Licensed under FreeBSD License.
 * See http://animista.net/license for more info. 
 * w: http://animista.net, t: @cssanimista
 * ---------------------------------------------- */

/**
 * ----------------------------------------
 * animation focus-in-expand-fwd
 * ----------------------------------------
 */
@-webkit-keyframes focus-in-expand-fwd {
  0% {
    letter-spacing: -0.5em;
    -webkit-transform: translateZ(-800px);
            transform: translateZ(-800px);
    -webkit-filter: blur(12px);
            filter: blur(12px);
    opacity: 0;
  }
  100% {
    -webkit-transform: translateZ(0);
            transform: translateZ(0);
    -webkit-filter: blur(0);
            filter: blur(0);
    opacity: 1;
  }
}
@keyframes focus-in-expand-fwd {
  0% {
    letter-spacing: -0.5em;
    -webkit-transform: translateZ(-800px);
            transform: translateZ(-800px);
    -webkit-filter: blur(12px);
            filter: blur(12px);
    opacity: 0;
  }
  100% {
    -webkit-transform: translateZ(0);
            transform: translateZ(0);
    -webkit-filter: blur(0);
            filter: blur(0);
    opacity: 1;
  }
}

/* ----------------------------------------------
 * Generated by Animista on 2021-9-20 9:22:2
 * Licensed under FreeBSD License.
 * See http://animista.net/license for more info. 
 * w: http://animista.net, t: @cssanimista
 * ---------------------------------------------- */

/**
 * ----------------------------------------
 * animation tracking-in-expand
 * ----------------------------------------
 */
@-webkit-keyframes tracking-in-expand {
  0% {
    letter-spacing: -0.5em;
    opacity: 0;
  }
  40% {
    opacity: 0.6;
  }
  100% {
    opacity: 1;
  }
}
@keyframes tracking-in-expand {
  0% {
    letter-spacing: -0.5em;
    opacity: 0;
  }
  40% {
    opacity: 0.6;
  }
  100% {
    opacity: 1;
  }
}

.container {
  position: absolute;
  transform: translate(-50%, -50%);
  top: 40%;
  left: 50%;
}

.glitch {
  color: rgb(223, 191, 191);
  position: relative;
  font-size: 9vw;
  animation: glitch 5s 5s infinite;
}

.glitch::before {
  content: attr(data-text);
  position: absolute;
  left: -2px;
  text-shadow: -5px 0 magenta;
  background: black;
  overflow: hidden;
  top: 0;
  animation: noise-1 3s linear infinite alternate-reverse, glitch 5s 5.05s infinite;
}

.glitch::after {
  content: attr(data-text);
  position: absolute;
  left: 2px;
  text-shadow: -5px 0 lightgreen;
  background: black;
  overflow: hidden;
  top: 0;
  animation: noise-2 3s linear infinite alternate-reverse, glitch 5s 5s infinite;
}

@keyframes glitch {
  1%{
    transform: rotateX(10deg) skewX(90deg);
  }
  2%{
    transform: rotateX(0deg) skewX(0deg);
  }
}

@keyframes noise-1 {
  $steps: 30;
  @for $i from 1 through $steps {
    #{percentage($i*(1/$steps))} {
      $top: random(100);
      $bottom: random(101 - $top);
      clip-path: inset(#{$top}px 0 #{$bottom}px 0);
    }
  }
}

@keyframes noise-2 {
  $steps: 30;
  @for $i from 0 through $steps {
    #{percentage($i*(1/$steps))} {
      $top: random(100);
      $bottom: random(101 - $top);
      clip-path: inset(#{$top}px 0 #{$bottom}px 0);
    }
  }
}

.scanlines {
  overflow: hidden;
  mix-blend-mode: difference;
}

.scanlines::before {
  content: "";
  position: absolute;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;

  background: repeating-linear-gradient(
    to bottom,
    transparent 0%,
    rgba(255, 255, 255, 0.05) .5%,
    transparent 1%
  );

  animation: fudge 7s ease-in-out alternate infinite;
}


@keyframes fudge {
  from {
    transform: translate(0px, 0px);
  }
  to {
    transform: translate(0px, 2%);
  }
}

.glow {
  @extend .glitch;
  text-shadow: 0 0 1000px rgb(223, 191, 191);
  color: transparent;
  position: absolute;
  top: 0;
}

.subtitle {
  font-family: Arial, Helvetica, sans-serif;
  font-weight: 100;
  font-size: .8vw;
  color: rgba(165, 141, 141, .4);
  text-transform: uppercase;
  letter-spacing: 1em;
  text-align: center;
  position: absolute;
  left: 17%;
  animation: glitch-2 5s 5.02s infinite;
}

@keyframes glitch-2 {
  1%{
    transform: rotateX(10deg) skewX(70deg);
  }
  2%{
    transform: rotateX(0deg) skewX(0deg);
  }
}

@keyframes bounceIn {
  0% {
    transform: scale(0.1);
    opacity: 0;
  }
  60% {
    transform: scale(1.2);
    opacity: 1;
  }
  100% {
    transform: scale(1);
  }
}
@keyframes slidein {
  from {
    margin-left: 100%;
    width: 300%;
  }

  to {
    margin-left: 0%;
    width: 100%;
  }
}
.body{
background: center / contain no-repeat url("../../media/examples/firefox-logo.svg"),
            #eee 35% url("https://wallpaperaccess.com/full/758545.jpg");
            }
.bdyData{

display: flex;
    flex-wrap: wrap;
    justify-content: center;
    flex-direction: column;
}

.contenuBtn{
display:block;
background: grey;
padding: 20px
}

.buttonEditor{
  display: flex;
  column-gap: 20px;
 margin: 15px;
   
}
.contenu{
display: flex;
    justify-content: center;
   max-width: 1000px;
    max-height: 1000px;
    min-width: 100px;
    margin: 10px;
    min-height: 100px;
}
    `;
    html = `
<div class="bdyData">
<div class="contenu">
    <div id="logo" >mon logo 2
    </div>
    </div>
    
    <div class="contenuBtn" id="btnEdi">
    <h1>EDITION</h1>
    <div class="buttonEditor">
    <div>
    hauteur:<input type="number" id="sizeLogoH" min=100 max=500 ></div>
    <div>
    largeur:<input type="number" id="sizeLogoL" min=100 max=500 >
    </div>
    </div>
    
    <div class="buttonEditor">
    <div>
    texte :<input type="text" id="logoEdit">
    </div>
      <div>taille :  <input type="range" min=5 max=100 
                          id="selecteurTaille"> 
                          </div>
                          <div> Couleur : <input type="color" id="selecteurCouleur"></div>
                           <select name="position" id="positionText">
    <option value="">choisir votre le positionnement du texte</option>
    <option value="centre">centre</option>
    <option value="gauche">gauche</option>
    <option value="droite">droite</option>
</select>

<select name="police" id="policeSelect">
    <option value="">choisir votre police de texte</option>
    <option value="roboto">roboto</option>
    <option value="arial">arial</option>
    <option value="Verdana">Verdana</option>
      <option value="Optima">Optima</option>
</select>
                          </div>
  
  <div class="buttonEditor">
   <div> Couleur du border <input type="color" id="borderColor"></div>
    <div>Largeur du bordeur<input id="border"></div>
     <div>Radius du bordeur<input id="borderRadius"></div>
    <div>url du border <input type='text' id="borderUrl"/></div>
    </div>

                        
       
     <div class="buttonEditor">
                         <select name="background" id="backSelect">
    <option value="">fond d'ecran propos√©</option>
    <option value="fire">fire</option>
    <option value="water">Water</option>
    <option value="grass">Grass</option>
</select>
<input type='file' id="file"/>
  <div>url d'une image<input type='text' id="fileUrl"/></div>
</div>


<div class="buttonEditor">

<select name="animation" id="selectAnim">
    <option value="">choisir votre animation</option>
    <option value="bounce">bounce</option>
    <option value="glitch">glitch</option>
    <option value="slidein">slidein</option>
</select>

</div>
<button id="btnExport">Exporter le logo</button>
</div>

</div>

<button id="btnCacher">Cacher l'editeur</button>
    `;

    constructor() {
        super();
        // On cr√©e le "shadow DOM"
        this.attachShadow({mode: "open"});
        const url = new URLSearchParams(window.location.search);
        console.log('LOLOLO ', url, url.get('h'));
        // r√©cup√©rer les propri√©t√©s/attributs HTML
        this.couleur = this.getAttribute("couleur");
        if (!this.couleur) this.couleur = "black";

        console.log("couleur r√©cup√©r√©e = " + this.couleur);

        this.text = this.getAttribute("texte");
        if (url.get('texte')) {
            this.text = url.get('texte');
        }
        this.animationClass = this.getAttribute("animation");
        if (url.get('anim')) {
            this.animationClass = url.get('anim');
        }

        this.controls = this.getAttribute("controls");
        if (url.get('controls')) {
            this.controls = url.get('controls');
        }

        this.size = this.getAttribute("size");
        if (url.get('taille')) {
            this.size = url.get('taille');
        }
        //
        this.hauteur = this.getAttribute("hauteur");

        if (url.get('h')) {
            this.hauteur = url.get('h');
        }
        this.largeur = this.getAttribute("largeur");
        if (url.get('l')) {
            this.largeur = url.get('l');
        }
        this.borderColor = this.getAttribute("borderColor");

        if (url.get('colorB')) {
            this.borderColor = url.get('colorB');
        }
        this.borderSize = this.getAttribute("borderSize");
        if (url.get('lb')) {
            this.borderSize = url.get('lb');
        }

        this.borderRadius = this.getAttribute("borderRadius")
        if (url.get('rb')) {
            this.borderRadius = url.get('rb');
        }


        this.posText = this.getAttribute("posText");
        if (url.get('pos')) {
            this.posText = url.get('pos');
        }

        this.policeText = this.getAttribute("policeText");
        if (url.get('police')) {
            this.policeText = url.get('police');
        }


        this.currentBackground = "images/water.jpeg)";
    }

    connectedCallback() {
        // ici on instancie l'interface graphique etc.
        this.shadowRoot.innerHTML = `<style>${this.style}</style>`
            + this.html;

        this.logo = this.shadowRoot.querySelector("#logo");
        // affecter les valeurs des attributs √† la cr√©ation
        this.logo.style.color = this.couleur;
        this.logo.classList.add(this.animationClass);
        this.logo.innerHTML = this.text;
        this.logo.style.height = this.hauteur;
        this.logo.style.width = this.largeur;
        this.logo.style.fontSize = this.size;
        this.logo.style.borderColor = this.borderColor;
        this.logo.style.borderWidth = this.borderSize;
        this.logo.style.borderRadius = this.borderRadius;
        this.logo.style.textAlign = this.posText;
        this.logo.style.fontSize = this.policeText;

        if (this.controls !== "true") {
            this.shadowRoot.querySelector("#contenuBtn").style.display = none;
        }
        this.declareEcouteurs();

        // On modifie les URLs relatifs
        this.fixRelativeURLs();
    }

    fixRelativeURLs() {
        let images = this.shadowRoot.querySelectorAll('img');
        images.forEach((e) => {
            console.log("dans le foreach")
            let imagePath = e.getAttribute('src');
            e.src = getBaseURL() + '/' + imagePath;
        });

        //console.log(getBaseURL() +  "images/flammes.jpg")
        this.logo.style.background = "url(" + getBaseURL() + this.currentBackground;//
    }

    declareEcouteurs() {

        this.shadowRoot.querySelector("#btnCacher")
            .addEventListener("click", (event) => {
                this.changeControl();
            });
        this.shadowRoot.querySelector("#selecteurCouleur")
            .addEventListener("input", (event) => {
                this.changeCouleur(event.target.value);
            });

        this.shadowRoot.querySelector("#selecteurTaille")
            .addEventListener("input", (event) => {
                this.changeSize(event.target.value);
            });

        this.shadowRoot.querySelector("#backSelect")
            .addEventListener("input", (event) => {
                this.changeBackground(event.target.value);
            });
        this.shadowRoot.querySelector("#file")
            .addEventListener('input', (event) => {
                this.uploadFile(event);
            });
        this.shadowRoot.querySelector("#fileUrl")
            .addEventListener('input', (event) => {
                this.changeBackByUrl(event);
            });

        this.shadowRoot.querySelector("#logoEdit")
            .addEventListener('input', (event) => {
                this.changeText(event);
            });
        this.shadowRoot.querySelector("#sizeLogoH")
            .addEventListener('input', (event) => {
                this.changeHauteur(event);
            });
        this.shadowRoot.querySelector("#sizeLogoL")
            .addEventListener('input', (event) => {
                this.changeLargeur(event);
            });

        this.shadowRoot.querySelector("#border")
            .addEventListener('input', (event) => {
                this.changeBorder(event);
            });
        this.shadowRoot.querySelector("#borderColor")
            .addEventListener('input', (event) => {
                this.changeBorderColor(event);
            });
        this.shadowRoot.querySelector("#positionText")
            .addEventListener('input', (event) => {
                this.changePosition(event);
            });

        this.shadowRoot.querySelector("#policeSelect")
            .addEventListener('input', (event) => {
                this.changePolice(event);
            });
        this.shadowRoot.querySelector("#borderUrl")
            .addEventListener('input', (event) => {
                this.changeBorderImage(event);
            });
        this.shadowRoot.querySelector("#selectAnim")
            .addEventListener('input', (event) => {
                this.changeAnimation(event);
            });

        this.shadowRoot.querySelector("#btnExport")
            .addEventListener('click', (event) => {
                this.exportUrl();
            });

        this.shadowRoot.querySelector("#borderRadius")
            .addEventListener("input", (event) => {
                this.changeRadius(event.target.value);
            });

    }


    changeRadius(val) {
        this.logo.style.borderRadius = val + "px";
    }

    exportUrl() {
        const urlParams = new URLSearchParams(window.location.search);

        urlParams.set('h', this.logo.style.height);
        urlParams.set('l', this.logo.style.width);
        urlParams.set('texte', this.logo.innerHTML);
        urlParams.set('taille', this.logo.style.fontSize);
        urlParams.set('pos', this.logo.style.textAlign);
        urlParams.set('police', this.logo.style.fontFamily);
        urlParams.set('control', this.controls);

        urlParams.set('colorB', this.logo.style.borderColor);
        urlParams.set('lb', this.logo.style.borderWidth);
        urlParams.set('rb', this.logo.style.borderRadius);
        urlParams.set('urlBack', this.logo.style.background);
        urlParams.set('anim', this.logo.classList[0]);

        window.location.search = urlParams;
    }

    changeControl() {
        console.log('aaa', this.controls);
        if (this.controls === 'true' || this.controls === true) {
            this.controls = false;
        } else {
            this.controls = true;
        }

        console.log('bbb', this.controls);
        if (this.controls) {

            this.shadowRoot.querySelector("#btnEdi").style.display = 'none';
        } else {
            this.shadowRoot.querySelector("#btnEdi").style.display = 'block';

        }
    }

    changeBorderImage(event) {
        this.logo.style.borderImage = "url(" + event.target.value;
    }

    // Fonction
    changeCouleur(val) {
        this.logo.style.color = val;
    }

    changeBackground(val) {

        switch (val) {
            case 'water':
                this.currentBackground = "images/water.jpeg)";
                break
            case 'fire':
                this.currentBackground = "images/flammes.jpg)";
                break
            case 'grass':
                this.currentBackground = "images/grass.jpeg)";
                break
        }
        this.logo.style.background = "url(" + getBaseURL() + this.currentBackground;
    }

    uploadFile(e) {
        console.log(e);
        const file = e.target.files[0];
        console.log(file)
        //this.logo.style.background = "url(" + getBaseURL() + file;
        // this.shadowRoot.querySelector('#myImg').src = file.name;
        URL.createObjectURL(e.target.files[0]);
        console.log(URL.createObjectURL(e.target.files[0]));
        this.logo.style.background = "url(" + URL.createObjectURL(e.target.files[0]);
    }


    changeBackByUrl(val) {
        const url = val.target.value
        if (validURL(url)) {
            this.logo.style.background = "url(" + val.target.value;
        } else console.log('error')
    }

    changeSize(val) {

        this.logo.style.fontSize = val + "px";
    }

    changeText(val) {
        this.logo.innerHTML = val.target.value;
    }

    changeHauteur(val) {
        this.logo.style.height = val.target.value;
    }

    changeLargeur(val) {
        this.logo.style.width = val.target.value;
    }

    changeBorderColor(event) {
        this.logo.style.borderColor = event.target.value;
    }

    changeBorder(event) {
        this.logo.style.borderWidth = event.target.value;
    }

    changePosition(event) {
        switch (event.target.value) {
            case 'centre':
                this.logo.style.textAlign = 'center';
                break
            case 'gauche':
                this.logo.style.textAlign = 'left';
                break
            case 'droite':
                this.logo.style.textAlign = 'right';
                break
        }
    }

    changePolice(event) {
        switch (event.target.value) {
            case 'Optima':
                this.logo.style.fontFamily = 'Optima';
                break
            case 'roboto':
                this.logo.style.fontFamily = 'roboto';
                break
            case 'arial':
                this.logo.style.fontFamily = 'arial';
                break
            case 'Verdana':
                this.logo.style.fontFamily = 'verdana';
                break
        }
    }

    changeAnimation(event) {
        console.log(event.target.value)
        this.logo.classList = [];
        switch (event.target.value) {
            case '':

                this.logo.style.animationName = '';
                this.logo.style.animationDuration = '';
                this.logo.style.animationIterationCount = '';
                this.logo.style.animationDirection = '';
                break;

            case 'glitch':
                this.logo.style.animationName = 'glitch';
                this.logo.style.animationDuration = '5s'
                this.logo.style.animationIterationCount = 'infinite';
                this.logo.style.animationDirection = 'alternate';

                break;
            case 'slidein':
                console.log('SLIIIIIDE')
                this.logo.style.animationName = 'slidein';
                this.logo.style.animationDuration = '3s'
                this.logo.style.animationIterationCount = 'infinite';
                this.logo.style.animationDirection = 'alternate';
                break;

            case 'bounce':
                this.logo.style.animationName = 'my-animation';
                this.logo.style.animationDuration = '2s'
                this.logo.style.animationIterationCount = 'infinite';
                this.logo.style.animationDirection = 'alternate';
                this.logo.style.animationTimingFunction = 'linear';

        }
        console.log(this.logo.classList)

    }


}

customElements.define("my-logo", MyLogo);
